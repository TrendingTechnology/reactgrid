import * as React from "react";
import { ReactGridProps, CellMatrix, State, StateUpdater, MenuOption } from "../Common";
export declare class ReactGrid extends React.Component<ReactGridProps, State> {
    private updateState;
    private pointerEventsController;
    state: State;
    static getDerivedStateFromProps(props: ReactGridProps, state: State): {
        cellTemplates: {};
        customFocuses: import("../Common").Focus[] | undefined;
        disableFillHandle: boolean;
        disableRangeSelection: boolean;
        disableColumnSelection: boolean;
        disableRowSelection: boolean;
        updateState: StateUpdater;
        cellMatrix: CellMatrix;
        currentBehavior: import("../Common").Behavior;
        floatingCellEditor: boolean;
        hiddenFocusElement: HTMLDivElement;
        viewportElement: HTMLDivElement;
        hiddenScrollableElement: HTMLDivElement;
        queuedDataChanges: import("../Common").DataChange[];
        currentlyEditedCell?: import("../Common").Cell | undefined;
        contextMenuPosition: number[];
        lineOrientation: import("../Common").Orientation;
        linePosition: number;
        shadowSize: number;
        shadowPosition: number;
        shadowCursor: string;
        selectionMode: import("../Common").SelectionMode;
        selectedRanges: import("../Common").Range[];
        selectedIndexes: number[];
        selectedIds: import("../Common").Id[];
        focusedLocation?: import("../Common").Location | undefined;
        activeSelectedRangeIdx: number;
        visibleRange: import("../Common").Range;
        minScrollTop: number;
        maxScrollTop: number;
        minScrollLeft: number;
        maxScrollLeft: number;
        log: (text: string) => void;
    };
    constructor(props: ReactGridProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): React.ComponentElement<{
        state: State;
        onKeyDown: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyUp: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onCopy: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onCut: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onPaste: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onPasteCapture: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onPointerDown: (event: React.PointerEvent<HTMLDivElement>) => void;
        onContextMenu: (event: React.PointerEvent<HTMLDivElement>) => void;
        onScroll: () => void;
        onRowContextMenu: (menuOptions: MenuOption[]) => MenuOption[];
        onColumnContextMenu: (menuOptions: MenuOption[]) => MenuOption[];
        onRangeContextMenu: (menuOptions: MenuOption[]) => MenuOption[];
        viewportElementRefHandler: (viewportElement: HTMLDivElement) => void;
        hiddenElementRefHandler: (hiddenFocusElement: HTMLInputElement) => void;
    }, React.Component<{
        state: State;
        onKeyDown: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onKeyUp: (event: React.KeyboardEvent<HTMLDivElement>) => void;
        onCopy: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onCut: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onPaste: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onPasteCapture: (event: React.ClipboardEvent<HTMLDivElement>) => void;
        onPointerDown: (event: React.PointerEvent<HTMLDivElement>) => void;
        onContextMenu: (event: React.PointerEvent<HTMLDivElement>) => void;
        onScroll: () => void;
        onRowContextMenu: (menuOptions: MenuOption[]) => MenuOption[];
        onColumnContextMenu: (menuOptions: MenuOption[]) => MenuOption[];
        onRangeContextMenu: (menuOptions: MenuOption[]) => MenuOption[];
        viewportElementRefHandler: (viewportElement: HTMLDivElement) => void;
        hiddenElementRefHandler: (hiddenFocusElement: HTMLInputElement) => void;
    }, any, any>>;
    private hiddenElementRefHandler;
    private pasteCaptureHandler;
    private scrollHandler;
    private viewportElementRefHandler;
    private pointerDownHandler;
    private windowResizeHandler;
    private keyDownHandler;
    private keyUpHandler;
    private copyHandler;
    private pasteHandler;
    private cutHandler;
    private handleContextMenu;
    private updateOnNewState;
}
