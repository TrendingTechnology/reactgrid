import { CellMatrix, Behavior, Range, Location, SelectionMode, Orientation, DataChange } from ".";
import { CellTemplates, Id, Focus, Cell } from "./PublicModel";
export declare type StateUpdater = (modifier: (state: State) => State) => void;
export declare class State {
    readonly updateState: StateUpdater;
    constructor(updateState: StateUpdater);
    readonly cellMatrix: CellMatrix;
    readonly currentBehavior: Behavior;
    readonly floatingCellEditor: boolean;
    readonly cellTemplates: CellTemplates;
    hiddenFocusElement: HTMLDivElement;
    readonly viewportElement: HTMLDivElement;
    hiddenScrollableElement: HTMLDivElement;
    readonly queuedDataChanges: DataChange[];
    currentlyEditedCell?: Cell;
    readonly customFocuses: Focus[];
    readonly disableFillHandle?: boolean;
    readonly disableRangeSelection?: boolean;
    readonly disableColumnSelection?: boolean;
    readonly disableRowSelection?: boolean;
    readonly contextMenuPosition: number[];
    readonly lineOrientation: Orientation;
    readonly linePosition: number;
    readonly shadowSize: number;
    readonly shadowPosition: number;
    readonly shadowCursor: string;
    readonly selectionMode: SelectionMode;
    readonly selectedRanges: Range[];
    readonly selectedIndexes: number[];
    readonly selectedIds: Id[];
    readonly focusedLocation?: Location;
    readonly activeSelectedRangeIdx: number;
    readonly visibleRange: Range;
    readonly minScrollTop: number;
    readonly maxScrollTop: number;
    readonly minScrollLeft: number;
    readonly maxScrollLeft: number;
    readonly log: (text: string) => void;
}
